

 71%|███████████████████████████████████████████████████████████████▌                         | 140/196 [00:03<00:00, 100.01it/s]
[32m[2023-03-14 05:28:19 lenet][33m(main.py 179)[39m: INFO Train: [0/50]	lr 0.000300	time 0.0042 (0.0203)	loss 2.3782 (3.1563)	Acc@1 6.250 (9.642)	Mem 23MB
[32m[2023-03-14 05:28:19 lenet][33m(main.py 188)[39m: INFO EPOCH 0 training takes 0:00:04
[32m[2023-03-14 05:28:19 lenet][33m(main.py 115)[39m: INFO  * Train Acc 9.642 Train Loss 3.156

[32m[2023-03-14 05:28:19 lenet][33m(main.py 116)[39m: INFO Accuracy of the network on the 50000 train images: 9.6%
[32m[2023-03-14 05:28:21 lenet][33m(main.py 221)[39m: INFO Validate: 	Time 0.003 (0.048)	Loss 2.3621 (2.3787)	Acc@1 18.750 (10.000)	Mem 23MB
[32m[2023-03-14 05:28:21 lenet][33m(main.py 120)[39m: INFO  * Val Acc 10.000 Val Loss 2.379
[32m[2023-03-14 05:28:21 lenet][33m(main.py 121)[39m: INFO Accuracy of the network on the 10000 val images: 10.0%
[32m[2023-03-14 05:28:21 lenet][33m(load_save.py 48)[39m: INFO output/lenet/ckpt_best.pth saving......
[32m[2023-03-14 05:28:21 lenet][33m(load_save.py 50)[39m: INFO output/lenet/ckpt_best.pth saved !!!
[32m[2023-03-14 05:28:21 lenet][33m(main.py 127)[39m: INFO Max accuracy: 10.00%

 79%|██████████████████████████████████████████████████████████████████████▍                  | 155/196 [00:03<00:00, 104.09it/s]
[32m[2023-03-14 05:28:25 lenet][33m(main.py 179)[39m: INFO Train: [1/50]	lr 0.000300	time 0.0036 (0.0191)	loss 2.3257 (2.3432)	Acc@1 3.750 (9.990)	Mem 23MB
[32m[2023-03-14 05:28:25 lenet][33m(main.py 188)[39m: INFO EPOCH 1 training takes 0:00:03
[32m[2023-03-14 05:28:25 lenet][33m(main.py 115)[39m: INFO  * Train Acc 9.990 Train Loss 2.343

[32m[2023-03-14 05:28:25 lenet][33m(main.py 116)[39m: INFO Accuracy of the network on the 50000 train images: 10.0%
[32m[2023-03-14 05:28:27 lenet][33m(main.py 221)[39m: INFO Validate: 	Time 0.001 (0.047)	Loss 2.3302 (2.3252)	Acc@1 6.250 (10.000)	Mem 23MB
[32m[2023-03-14 05:28:27 lenet][33m(main.py 120)[39m: INFO  * Val Acc 10.000 Val Loss 2.325
[32m[2023-03-14 05:28:27 lenet][33m(main.py 121)[39m: INFO Accuracy of the network on the 10000 val images: 10.0%
[32m[2023-03-14 05:28:27 lenet][33m(main.py 127)[39m: INFO Max accuracy: 10.00%

 82%|█████████████████████████████████████████████████████████████████████████▉                | 161/196 [00:03<00:00, 97.08it/s]
[32m[2023-03-14 05:28:31 lenet][33m(main.py 179)[39m: INFO Train: [2/50]	lr 0.000299	time 0.0029 (0.0188)	loss 2.3181 (2.3191)	Acc@1 7.500 (9.890)	Mem 23MB
[32m[2023-03-14 05:28:31 lenet][33m(main.py 188)[39m: INFO EPOCH 2 training takes 0:00:03
[32m[2023-03-14 05:28:31 lenet][33m(main.py 115)[39m: INFO  * Train Acc 9.890 Train Loss 2.319

[32m[2023-03-14 05:28:31 lenet][33m(main.py 116)[39m: INFO Accuracy of the network on the 50000 train images: 9.9%
[32m[2023-03-14 05:28:33 lenet][33m(main.py 221)[39m: INFO Validate: 	Time 0.001 (0.047)	Loss 2.3024 (2.3146)	Acc@1 18.750 (10.000)	Mem 23MB
[32m[2023-03-14 05:28:33 lenet][33m(main.py 120)[39m: INFO  * Val Acc 10.000 Val Loss 2.315
[32m[2023-03-14 05:28:33 lenet][33m(main.py 121)[39m: INFO Accuracy of the network on the 10000 val images: 10.0%
[32m[2023-03-14 05:28:33 lenet][33m(main.py 127)[39m: INFO Max accuracy: 10.00%

 86%|████████████████████████████████████████████████████████████████████████████▎            | 168/196 [00:03<00:00, 104.41it/s]
[32m[2023-03-14 05:28:37 lenet][33m(main.py 179)[39m: INFO Train: [3/50]	lr 0.000297	time 0.0032 (0.0194)	loss 2.3123 (2.3127)	Acc@1 10.000 (9.848)	Mem 23MB
[32m[2023-03-14 05:28:37 lenet][33m(main.py 188)[39m: INFO EPOCH 3 training takes 0:00:03
[32m[2023-03-14 05:28:37 lenet][33m(main.py 115)[39m: INFO  * Train Acc 9.848 Train Loss 2.313

[32m[2023-03-14 05:28:37 lenet][33m(main.py 116)[39m: INFO Accuracy of the network on the 50000 train images: 9.8%
[32m[2023-03-14 05:28:39 lenet][33m(main.py 221)[39m: INFO Validate: 	Time 0.001 (0.050)	Loss 2.2745 (2.3119)	Acc@1 18.750 (10.000)	Mem 23MB
[32m[2023-03-14 05:28:39 lenet][33m(main.py 120)[39m: INFO  * Val Acc 10.000 Val Loss 2.312
[32m[2023-03-14 05:28:39 lenet][33m(main.py 121)[39m: INFO Accuracy of the network on the 10000 val images: 10.0%
[32m[2023-03-14 05:28:39 lenet][33m(main.py 127)[39m: INFO Max accuracy: 10.00%

 44%|████████████████████████████████████████▍                                                  | 87/196 [00:03<00:01, 71.54it/s]
[32m[2023-03-14 05:28:43 lenet][33m(main.py 179)[39m: INFO Train: [4/50]	lr 0.000295	time 0.0043 (0.0225)	loss 2.3094 (2.3098)	Acc@1 5.000 (10.014)	Mem 23MB
[32m[2023-03-14 05:28:43 lenet][33m(main.py 188)[39m: INFO EPOCH 4 training takes 0:00:04
[32m[2023-03-14 05:28:43 lenet][33m(main.py 115)[39m: INFO  * Train Acc 10.014 Train Loss 2.310

[32m[2023-03-14 05:28:43 lenet][33m(main.py 116)[39m: INFO Accuracy of the network on the 50000 train images: 10.0%
Traceback (most recent call last):
  File "/home/narisam/sp23-nmep-hw1/main.py", line 286, in <module>
    main(config)
  File "/home/narisam/sp23-nmep-hw1/main.py", line 119, in main
    val_acc1, val_loss = validate(config, data_loader_val, model)
  File "/home/narisam/miniconda3/envs/vision-zoo/lib/python3.10/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/narisam/sp23-nmep-hw1/main.py", line 202, in validate
    for idx, (images, target) in enumerate(data_loader):
  File "/home/narisam/miniconda3/envs/vision-zoo/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 681, in __next__
    data = self._next_data()
  File "/home/narisam/miniconda3/envs/vision-zoo/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 1359, in _next_data
    idx, data = self._get_data()
  File "/home/narisam/miniconda3/envs/vision-zoo/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 1325, in _get_data
    success, data = self._try_get_data()
  File "/home/narisam/miniconda3/envs/vision-zoo/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 1163, in _try_get_data
    data = self._data_queue.get(timeout=timeout)
  File "/home/narisam/miniconda3/envs/vision-zoo/lib/python3.10/multiprocessing/queues.py", line 113, in get
    if not self._poll(timeout):
  File "/home/narisam/miniconda3/envs/vision-zoo/lib/python3.10/multiprocessing/connection.py", line 257, in poll
    return self._poll(timeout)
  File "/home/narisam/miniconda3/envs/vision-zoo/lib/python3.10/multiprocessing/connection.py", line 424, in _poll
    r = wait([self], timeout)
  File "/home/narisam/miniconda3/envs/vision-zoo/lib/python3.10/multiprocessing/connection.py", line 931, in wait
    ready = selector.select(timeout)
  File "/home/narisam/miniconda3/envs/vision-zoo/lib/python3.10/selectors.py", line 416, in select
    fd_event_list = self._selector.poll(timeout)
KeyboardInterrupt